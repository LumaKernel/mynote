Haskell/カリー=ハワード同型
https://ja.wikibooks.org/wiki/Haskell/%E3%82%AB%E3%83%AA%E3%83%BC%3D%E3%83%8F%E3%83%AF%E3%83%BC%E3%83%89%E5%90%8C%E5%9E%8B
- 論理式 <=> 型
- 証明 <=> その型をもつ値の存在を示す
- 定理 <=> 値が存在する型
- 非定理 <=> 値が存在しない型，Voidと同型[?]な型
- 公理 <=> 値が存在するとしている型
- 公理K <=> const = λxy.x :  P -> Q -> P
- 公理S <=> λxyz.xz(yz) : (P -> Q -> R) -> (P -> Q) -> (P -> R)
- 推論規則MP <=> ベータ簡約
- 公理DNE <=> catch [! これを仮定しなければ，言語は直観主義論理に対応する]

Coq のカリー・ハワード同型周辺について
https://qiita.com/tnagao7/items/d44f683bfdc5eb297466
- Theorem 名前 : 論理式. というのは，論理式 = 型であるような変数を定義している．
   - Proofは実際の値の存在を示すものであり，Proof fun f x => f x. のように値を直接示しても良い．



https://ocw.kyoto-u.ac.jp/ja/faculty-of-lettersja/002-006/pdf/curryhoward2.pdf

MP <=> β簡約
ではなさそうで，
(自然演繹における) 証明図の簡約 <=> ベータ簡約
みたいな対応が取れるらしい

証明 <=> プログラム
という対応と考えたほうがよくて，
ベータ簡約がプログラム自体の構文同値性について述べているので，
それが，証明の簡約化 (構文同値性) に対応するのが自然に思える


