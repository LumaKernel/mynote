Inductive day : Type :=
  | monday : day
  | tuesday : day
  | wednesday : day
  | thursday : day
  | friday : day
  | saturday : day
  | sunday : day.

Inductive month: Type :=
  | Jan : month.

Definition next_weekday (d: day): day :=
  match d with
  | monday => tuesday
  | tuesday => wednesday
  | wednesday => thursday
  | thursday => friday
  | friday => monday
  | saturday => monday
  | sunday => monday
  end.

Compute next_weekday monday.
Eval simpl in (next_weekday friday).
Eval simpl in (next_weekday (next_weekday saturday)).

Example test_next_weekday:
  (next_weekday (next_weekday saturday)) = tuesday.
Proof.
  simpl. reflexivity.
Qed.

Inductive bool: Type :=
  | true  : bool
  | false : bool.


Definition negb (b:bool): bool :=
  match b with
  | true => false
  | false => true
  end.


Definition andb (b1 b2 : bool) : bool :=
  match b1 with
  | true  => b2
  | false => false
  end.

Definition orb (b1 b2 : bool) : bool :=
  match b1 with
  | true => true
  | false => b2
  end.

Example test_orb1: (orb true false) = true.
Proof. simpl. reflexivity. Qed.

Example test_orb2: (orb false false) = false.
Proof. simpl. reflexivity. Qed.

Example test_orb3: (orb false true) = true.
Proof. simpl. reflexivity. Qed.

Example test_orb4: (orb true false) = true.
Proof. simpl. reflexivity. Qed.


Definition admit {T: Type} : T. Admitted.
Check admit.

Definition nandb (b1 b2: bool) : bool :=
  admit.

Example test_nandb1: (nandb true false) = true.
Admitted.
Example test_nandb2: (nandb false false) = true.
Admitted.
Example test_nandb3: (nandb false true) = true.
Admitted.
Example test_nandb4: (nandb true true) = false.
Admitted.


Definition andb3 (b1:bool) (b2:bool) (b3:bool) : bool :=
   admit.

Example test_andb31: (andb3 true true true) = true.
Admitted.
Example test_andb32: (andb3 false true true) = false.
Admitted.
Example test_andb33: (andb3 true false true) = false.
Admitted.
Example test_andb34: (andb3 true true false) = false.
Admitted.


(* Checkで型を確認 *)

Check (negb true).
Check negb.
Check admit.


Module Playground1.

Inductive nat: Type :=
  | O : nat
  | S : nat -> nat.

End Playground1.

Definition minustwo (n: nat): nat :=
  match n with
  | O => O
  | S O => O
  | S (S n') => n'
  end.


Check S (S (S (S O))).
Eval simpl in (minustwo 4).

Check S.
Check pred.
Check minustwo.


Fixpoint evenb (n: nat): bool :=
  match n with
  | O => true
  | S O => false
  | S (S n') => evenb n'
  end.


(* Definition oddb (n: nat): nat := negb (evenb n). *)
(* 型推論すげー *)
Definition oddb n := negb (evenb n).

Example test_oddb1: (oddb (S O)) = true.
Proof. simpl. reflexivity. Qed.
Example test_oddb2: (oddb (S (S (S (S O))))) = false.
Proof. simpl. reflexivity. Qed.


Module Playground2.
Fixpoint plus n m : nat :=
  match n with
  | O => m
  | S n' => S (plus n' m)
  end.
Eval simpl in (plus (S (S (S O))) (S (S O))).

Check plus.

Fixpoint mult n m : nat :=
  match n with
  | O => O
  | S n' => plus m (mult n' m)
  end.


Fixpoint minus n m : nat :=
  match n, m with
  | O, _ => O
  | S _, O => n
  | S n', S m' => minus n' m'
  end.

End Playground2.

Fixpoint exp (base power : nat) : nat :=
  match power with
  | O => S O
  | S p => mult base (exp base p)
  end.

Example test_mult1: mult 3 3 = 9.
Proof. simpl. reflexivity. Qed.

Fixpoint factorial (n:nat) : nat :=
  match n with
  | O => S O
  | S n' => mult n (factorial n')
  end.

Example test_factorial1: (factorial 3) = 6.
Proof. auto. Qed.
Example test_factorial2: (factorial 5) = (mult 10 12).
Proof. auto. Qed.


Notation "x + y" := (plus x y) (at level 50, left associativity) : nat_scope.
Notation "x - y" := (minus x y) (at level 50, left associativity) : nat_scope.
Notation "x * y" := (mult x y) (at level 40, left associativity) : nat_scope.

Check ((0 + 1) + 1).
Check Type.
Check nat.
Check Set.

Compute (nat*nat)%type.

Fixpoint beq_nat (n m : nat) : bool :=
  match n with
  | O => match m with
         | O => true
         | S m' => false
         end
  | S n' => match m with
            | O => false
            | S m' => beq_nat n' m'
            end
  end.

Fixpoint ble_nat (n m : nat) : bool :=
  match n with
  | O => true
  | S n' =>
      match m with
      | O => false
      | S m' => ble_nat n' m'
      end
  end.

Example test_ble_nat1: (ble_nat 2 2) = true.
Proof. simpl. reflexivity. Qed.
Example test_ble_nat2: (ble_nat 2 4) = true.
Proof. simpl. reflexivity. Qed.
Example test_ble_nat3: (ble_nat 4 2) = false.
Proof. simpl. reflexivity. Qed.


Fixpoint blt_nat (n m : nat) : bool :=
  match n with
  | O =>
    match m with
    | O => false
    | _ => true
    end
  | S n' =>
    match m with
    | O => false
    | S m' => blt_nat n' m'
    end
  end.

Example test_blt_nat1: (blt_nat 2 2) = false.
Proof. auto. Qed.
Example test_blt_nat2: (blt_nat 2 4) = true.
Proof. auto. Qed.
Example test_blt_nat3: (blt_nat 4 2) = false.
Proof. auto. Qed.

Theorem plus_O_n' : forall n:nat, 0 + n = n.
Proof.
  reflexivity. Qed.




















































